'use client'

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { AlertTriangle, User, DollarSign, Users, Shield } from 'lucide-react'
import { useToast } from '@/hooks/use-toast'
import { apiRequest } from '@/lib/api'

interface AddVulnerabilityFormProps {
  citizenId: string
  citizenName: string
  citizenCpf: string
  onSuccess: () => void
  onCancel?: () => void
}

const RISK_LEVELS = [
  { value: 'LOW', label: 'Baixo', color: 'text-green-600', bgColor: 'bg-green-50' },
  { value: 'MEDIUM', label: 'Médio', color: 'text-yellow-600', bgColor: 'bg-yellow-50' },
  { value: 'HIGH', label: 'Alto', color: 'text-orange-600', bgColor: 'bg-orange-50' },
  { value: 'CRITICAL', label: 'Crítico', color: 'text-red-600', bgColor: 'bg-red-50' },
]

const VULNERABILITY_TYPES = [
  { value: 'ECONOMIC', label: 'Econômica' },
  { value: 'SOCIAL', label: 'Social' },
  { value: 'HEALTH', label: 'Saúde' },
  { value: 'HOUSING', label: 'Habitação' },
  { value: 'FOOD_INSECURITY', label: 'Insegurança Alimentar' },
  { value: 'UNEMPLOYMENT', label: 'Desemprego' },
  { value: 'DOMESTIC_VIOLENCE', label: 'Violência Doméstica' },
  { value: 'SUBSTANCE_ABUSE', label: 'Dependência Química' },
  { value: 'MENTAL_HEALTH', label: 'Saúde Mental' },
  { value: 'MULTIPLE', label: 'Múltiplas Vulnerabilidades' },
]

export function AddVulnerabilityForm({
  citizenId,
  citizenName,
  citizenCpf,
  onSuccess,
  onCancel,
}: AddVulnerabilityFormProps) {
  const { toast } = useToast()
  const [formData, setFormData] = useState({
    familyCode: '',
    memberCount: '',
    monthlyIncome: '',
    riskLevel: 'MEDIUM',
    vulnerabilityType: '',
    socialWorker: '',
    observations: '',
  })
  const [saving, setSaving] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!formData.memberCount || !formData.vulnerabilityType) {
      toast({
        variant: 'destructive',
        title: 'Campos obrigatórios',
        description: 'Preencha número de membros e tipo de vulnerabilidade',
      })
      return
    }

    try {
      setSaving(true)
      const response = await apiRequest(`/admin/citizens/${citizenId}/vulnerability`, {
        method: 'POST',
        body: JSON.stringify({
          ...formData,
          memberCount: parseInt(formData.memberCount),
          monthlyIncome: formData.monthlyIncome ? parseFloat(formData.monthlyIncome) : null,
        }),
      })

      if (response.success) {
        toast({
          title: 'Vulnerabilidade registrada',
          description: `Família de ${citizenName} cadastrada na Assistência Social`,
        })
        onSuccess()
      }
    } catch (error: any) {
      toast({
        variant: 'destructive',
        title: 'Erro ao salvar',
        description: error.message || 'Não foi possível salvar os dados',
      })
    } finally {
      setSaving(false)
    }
  }

  const selectedRiskLevel = RISK_LEVELS.find(r => r.value === formData.riskLevel)
  const perCapitaIncome = formData.monthlyIncome && formData.memberCount
    ? (parseFloat(formData.monthlyIncome) / parseInt(formData.memberCount)).toFixed(2)
    : '0.00'

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <AlertTriangle className="h-5 w-5 text-orange-600" />
          Adicionar Situação de Vulnerabilidade
        </CardTitle>
      </CardHeader>
      <CardContent>
        {/* Informações do Cidadão */}
        <div className={`mb-6 p-4 rounded-lg border-2 ${selectedRiskLevel?.bgColor} border-${selectedRiskLevel?.color.replace('text-', '')}`}>
          <div className="flex items-center gap-3 mb-3">
            <User className="h-8 w-8 text-gray-600" />
            <div className="flex-1">
              <h3 className="font-semibold text-lg">{citizenName}</h3>
              <p className="text-sm text-gray-600">CPF: {citizenCpf}</p>
            </div>
            <div className={`px-3 py-1 rounded-full ${selectedRiskLevel?.bgColor}`}>
              <span className={`text-sm font-medium ${selectedRiskLevel?.color}`}>
                Risco: {selectedRiskLevel?.label}
              </span>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Código e Contagem */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="familyCode" className="flex items-center gap-2">
                <Shield className="h-4 w-4" />
                Código da Família
              </Label>
              <Input
                id="familyCode"
                value={formData.familyCode}
                onChange={(e) => setFormData({ ...formData, familyCode: e.target.value })}
                placeholder="Ex: FAM-2025-001 (opcional)"
              />
              <p className="text-xs text-gray-500 mt-1">Código de identificação interno</p>
            </div>

            <div>
              <Label htmlFor="memberCount" className="flex items-center gap-2">
                <Users className="h-4 w-4" />
                Nº de Membros *
              </Label>
              <Input
                id="memberCount"
                type="number"
                min="1"
                value={formData.memberCount}
                onChange={(e) => setFormData({ ...formData, memberCount: e.target.value })}
                placeholder="Incluindo o responsável"
                required
              />
            </div>
          </div>

          {/* Renda */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="monthlyIncome" className="flex items-center gap-2">
                <DollarSign className="h-4 w-4" />
                Renda Mensal Total (R$)
              </Label>
              <Input
                id="monthlyIncome"
                type="number"
                step="0.01"
                min="0"
                value={formData.monthlyIncome}
                onChange={(e) => setFormData({ ...formData, monthlyIncome: e.target.value })}
                placeholder="0,00"
              />
            </div>

            <div>
              <Label className="flex items-center gap-2">
                Renda Per Capita (calculada)
              </Label>
              <div className="h-10 px-3 py-2 bg-gray-50 border border-gray-200 rounded-md flex items-center">
                <span className="text-gray-700 font-medium">
                  R$ {perCapitaIncome}
                </span>
              </div>
              <p className="text-xs text-gray-500 mt-1">
                {parseFloat(perCapitaIncome) <= 218 && parseFloat(perCapitaIncome) > 0 ? (
                  <span className="text-red-600 font-medium">⚠️ Abaixo da linha de extrema pobreza</span>
                ) : parseFloat(perCapitaIncome) <= 522 && parseFloat(perCapitaIncome) > 0 ? (
                  <span className="text-orange-600 font-medium">⚠️ Abaixo da linha de pobreza</span>
                ) : (
                  'Renda familiar dividida por membros'
                )}
              </p>
            </div>
          </div>

          {/* Nível de Risco e Tipo */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="riskLevel">Nível de Risco *</Label>
              <Select
                value={formData.riskLevel}
                onValueChange={(value) => setFormData({ ...formData, riskLevel: value })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {RISK_LEVELS.map((level) => (
                    <SelectItem key={level.value} value={level.value}>
                      <span className={level.color}>{level.label}</span>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <p className="text-xs text-gray-500 mt-1">
                Avaliação da urgência de intervenção
              </p>
            </div>

            <div>
              <Label htmlFor="vulnerabilityType">Tipo de Vulnerabilidade *</Label>
              <Select
                value={formData.vulnerabilityType}
                onValueChange={(value) => setFormData({ ...formData, vulnerabilityType: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecione o tipo principal" />
                </SelectTrigger>
                <SelectContent>
                  {VULNERABILITY_TYPES.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      {type.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Assistente Social */}
          <div>
            <Label htmlFor="socialWorker">Assistente Social Responsável</Label>
            <Input
              id="socialWorker"
              value={formData.socialWorker}
              onChange={(e) => setFormData({ ...formData, socialWorker: e.target.value })}
              placeholder="Nome do profissional responsável"
            />
          </div>

          {/* Observações */}
          <div>
            <Label htmlFor="observations">Observações e Histórico</Label>
            <Textarea
              id="observations"
              value={formData.observations}
              onChange={(e) => setFormData({ ...formData, observations: e.target.value })}
              placeholder="Descreva a situação da família, necessidades identificadas, histórico de atendimentos anteriores..."
              rows={5}
            />
            <p className="text-xs text-gray-500 mt-1">
              Informações importantes para o acompanhamento da família
            </p>
          </div>

          {/* Alertas */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-900 mb-2">Próximos passos:</h4>
            <ul className="list-disc list-inside space-y-1 text-sm text-blue-700">
              <li>Família será incluída no cadastro de vulnerabilidade social</li>
              <li>Poderão ser solicitados benefícios sociais</li>
              <li>Visitas domiciliares poderão ser agendadas</li>
              <li>Acompanhamento sistemático será iniciado</li>
            </ul>
          </div>

          {/* Botões */}
          <div className="flex justify-end gap-3 pt-4 border-t">
            {onCancel && (
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
                disabled={saving}
              >
                Cancelar
              </Button>
            )}
            <Button type="submit" disabled={saving} className="bg-orange-600 hover:bg-orange-700">
              {saving ? 'Salvando...' : 'Registrar Vulnerabilidade'}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  )
}
