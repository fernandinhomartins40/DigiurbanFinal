/**
 * SERVI√áO DE AUTO-VINCULA√á√ÉO INTELIGENTE DE CIDAD√ÉOS
 *
 * Este servi√ßo √© respons√°vel por vincular automaticamente cidad√£os do UNASSIGNED_POOL
 * aos tenants corretos baseado na cidade de cadastro.
 *
 * Pode ser chamado:
 * 1. Manualmente pelo Super Admin (bot√£o de auto-vincula√ß√£o)
 * 2. Automaticamente ap√≥s a cria√ß√£o de um novo tenant
 */

import { PrismaClient, Prisma } from '@prisma/client';
import { UNASSIGNED_POOL_ID } from '../config/tenants';

const prisma = new PrismaClient();

interface AutoLinkResult {
  success: boolean;
  message: string;
  summary: {
    totalProcessed: number;
    linked: number;
    notLinked: number;
  };
  details: {
    linked: Array<{
      citizenId: string;
      name: string;
      email: string;
      linkedTo: {
        tenantId: string;
        tenantName: string;
        municipio: string;
        uf: string;
      };
    }>;
    notLinked: Array<{
      citizenId: string;
      name: string;
      city?: string;
      state?: string;
      reason: string;
    }>;
  };
}

/**
 * Vincula automaticamente cidad√£os do UNASSIGNED_POOL aos tenants corretos
 *
 * @param tenantId - Opcional: Se fornecido, vincula apenas cidad√£os desta cidade ao tenant espec√≠fico
 * @returns Resultado da opera√ß√£o com estat√≠sticas
 */
export async function autoLinkCitizens(tenantId?: string): Promise<AutoLinkResult> {
  const linked: AutoLinkResult['details']['linked'] = [];
  const notLinked: AutoLinkResult['details']['notLinked'] = [];

  try {
    // 1. Buscar cidad√£os no UNASSIGNED_POOL com endere√ßo
    const unlinkedCitizens = await prisma.citizen.findMany({
      where: {
        tenantId: UNASSIGNED_POOL_ID,
        address: {
          not: Prisma.JsonNull
        }
      },
      select: {
        id: true,
        name: true,
        email: true,
        address: true
      }
    });

    if (unlinkedCitizens.length === 0) {
      return {
        success: true,
        message: 'Nenhum cidad√£o aguardando vincula√ß√£o',
        summary: {
          totalProcessed: 0,
          linked: 0,
          notLinked: 0
        },
        details: { linked: [], notLinked: [] }
      };
    }

    // 2. Buscar tenants ativos (ou tenant espec√≠fico se fornecido)
    const tenantWhere: any = {
      AND: [
        { id: { not: UNASSIGNED_POOL_ID } },
        { nomeMunicipio: { not: null } },
        { status: { in: ['ACTIVE', 'TRIAL'] } }
      ]
    };

    if (tenantId) {
      tenantWhere.AND.push({ id: tenantId });
    }

    const tenants = await prisma.tenant.findMany({
      where: tenantWhere,
      select: {
        id: true,
        name: true,
        nomeMunicipio: true,
        ufMunicipio: true
      }
    });

    // 3. Criar mapa de munic√≠pios -> tenantId
    const municipioMap = new Map<string, typeof tenants[0]>();
    tenants.forEach(tenant => {
      if (tenant.nomeMunicipio && tenant.ufMunicipio) {
        const key = `${tenant.nomeMunicipio.toLowerCase()}-${tenant.ufMunicipio.toLowerCase()}`;
        municipioMap.set(key, tenant);
      }
    });

    // 4. Processar cada cidad√£o
    for (const citizen of unlinkedCitizens) {
      try {
        const address = citizen.address as any;

        // Validar endere√ßo
        if (!address || !address.city || !address.state) {
          notLinked.push({
            citizenId: citizen.id,
            name: citizen.name,
            reason: 'Endere√ßo incompleto (falta cidade ou estado)'
          });
          continue;
        }

        // Buscar tenant correspondente
        const cityKey = `${address.city.toLowerCase()}-${address.state.toLowerCase()}`;
        const matchingTenant = municipioMap.get(cityKey);

        if (matchingTenant) {
          // Vincular cidad√£o ao tenant
          await prisma.citizen.update({
            where: { id: citizen.id },
            data: { tenantId: matchingTenant.id }
          });

          linked.push({
            citizenId: citizen.id,
            name: citizen.name,
            email: citizen.email,
            linkedTo: {
              tenantId: matchingTenant.id,
              tenantName: matchingTenant.name,
              municipio: matchingTenant.nomeMunicipio!,
              uf: matchingTenant.ufMunicipio!
            }
          });

          console.log(`‚úÖ Cidad√£o ${citizen.name} vinculado a ${matchingTenant.name}`);
        } else {
          notLinked.push({
            citizenId: citizen.id,
            name: citizen.name,
            city: address.city,
            state: address.state,
            reason: 'Nenhum tenant encontrado para esta cidade'
          });
        }
      } catch (error) {
        console.error(`‚ùå Erro ao processar cidad√£o ${citizen.id}:`, error);
        notLinked.push({
          citizenId: citizen.id,
          name: citizen.name,
          reason: 'Erro ao processar'
        });
      }
    }

    const message = tenantId
      ? `Vincula√ß√£o ao tenant espec√≠fico conclu√≠da: ${linked.length} cidad√£os vinculados`
      : `Vincula√ß√£o autom√°tica conclu√≠da: ${linked.length} cidad√£os vinculados, ${notLinked.length} n√£o vinculados`;

    return {
      success: true,
      message,
      summary: {
        totalProcessed: unlinkedCitizens.length,
        linked: linked.length,
        notLinked: notLinked.length
      },
      details: {
        linked,
        notLinked
      }
    };
  } catch (error) {
    console.error('‚ùå Erro na auto-vincula√ß√£o:', error);
    throw error;
  }
}

/**
 * Hook chamado automaticamente ap√≥s cria√ß√£o de tenant
 * Vincula cidad√£os do UNASSIGNED_POOL que correspondem ao munic√≠pio do novo tenant
 */
export async function onTenantCreated(tenantId: string): Promise<void> {
  try {
    console.log(`üîó Iniciando auto-vincula√ß√£o para tenant ${tenantId}...`);

    const result = await autoLinkCitizens(tenantId);

    if (result.summary.linked > 0) {
      console.log(`‚úÖ ${result.summary.linked} cidad√£os foram automaticamente vinculados ao novo tenant`);
    } else {
      console.log(`‚ÑπÔ∏è  Nenhum cidad√£o aguardando vincula√ß√£o para este munic√≠pio`);
    }
  } catch (error) {
    console.error('‚ùå Erro no hook de auto-vincula√ß√£o:', error);
    // N√£o lan√ßar erro para n√£o bloquear cria√ß√£o do tenant
  }
}
