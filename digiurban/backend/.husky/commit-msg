#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# ============================================================================
# FASE 3.4 - COMMIT MESSAGE VALIDATION
# Valida√ß√£o do formato das mensagens de commit
# ============================================================================

commit_file="$1"
commit_msg=$(cat "$commit_file")

# Padr√£o esperado: tipo(escopo): descri√ß√£o
# Exemplos v√°lidos:
# feat(auth): adicionar autentica√ß√£o JWT
# fix(types): corrigir tipos AuthenticatedRequest
# docs(readme): atualizar documenta√ß√£o de instala√ß√£o
# refactor(utils): melhorar helpers do Prisma

# Regex para validar formato
pattern="^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}"

if ! echo "$commit_msg" | grep -qE "$pattern"; then
  echo "‚ùå Formato de commit inv√°lido!"
  echo ""
  echo "üìã Formato esperado:"
  echo "   tipo(escopo): descri√ß√£o"
  echo ""
  echo "üìö Tipos v√°lidos:"
  echo "   feat      - Nova funcionalidade"
  echo "   fix       - Corre√ß√£o de bug"
  echo "   docs      - Documenta√ß√£o"
  echo "   style     - Formata√ß√£o/estilo"
  echo "   refactor  - Refatora√ß√£o"
  echo "   test      - Testes"
  echo "   chore     - Manuten√ß√£o"
  echo "   perf      - Performance"
  echo "   ci        - CI/CD"
  echo "   build     - Build"
  echo "   revert    - Reverter commit"
  echo ""
  echo "‚úÖ Exemplos v√°lidos:"
  echo "   feat(auth): implementar login JWT"
  echo "   fix(types): corrigir AuthenticatedRequest"
  echo "   docs(api): atualizar documenta√ß√£o endpoints"
  echo ""
  echo "üìù Sua mensagem: '$commit_msg'"
  echo ""
  exit 1
fi

# Verificar se n√£o √© muito longa
if [ ${#commit_msg} -gt 100 ]; then
  echo "‚ö†Ô∏è  Mensagem de commit muito longa (${#commit_msg} caracteres)."
  echo "   Limite recomendado: 50-72 caracteres"
  echo "   Mensagem: '$commit_msg'"
  echo ""
fi

echo "‚úÖ Mensagem de commit v√°lida!"